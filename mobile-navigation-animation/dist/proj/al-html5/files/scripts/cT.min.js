
var BS = 128,
    BB = 128,
    RA = [, , , , [, , , , 10, , 12, , 14], , [, , , , 12, , 12, , 14], , [, , , , 14, , 14, , 14]],
    SO = [, , , , [, 1, 2, 3], , [, 1, 2, 3], , [, 1, 3, 4]],
    RC = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145],
    SB = [
        99,
        124,
        119,
        123,
        242,
        107,
        111,
        197,
        48,
        1,
        103,
        43,
        254,
        215,
        171,
        118,
        202,
        130,
        201,
        125,
        250,
        89,
        71,
        240,
        173,
        212,
        162,
        175,
        156,
        164,
        114,
        192,
        183,
        253,
        147,
        38,
        54,
        63,
        247,
        204,
        52,
        165,
        229,
        241,
        113,
        216,
        49,
        21,
        4,
        199,
        35,
        195,
        24,
        150,
        5,
        154,
        7,
        18,
        128,
        226,
        235,
        39,
        178,
        117,
        9,
        131,
        44,
        26,
        27,
        110,
        90,
        160,
        82,
        59,
        214,
        179,
        41,
        227,
        47,
        132,
        83,
        209,
        0,
        237,
        32,
        252,
        177,
        91,
        106,
        203,
        190,
        57,
        74,
        76,
        88,
        207,
        208,
        239,
        170,
        251,
        67,
        77,
        51,
        133,
        69,
        249,
        2,
        127,
        80,
        60,
        159,
        168,
        81,
        163,
        64,
        143,
        146,
        157,
        56,
        245,
        188,
        182,
        218,
        33,
        16,
        255,
        243,
        210,
        205,
        12,
        19,
        236,
        95,
        151,
        68,
        23,
        196,
        167,
        126,
        61,
        100,
        93,
        25,
        115,
        96,
        129,
        79,
        220,
        34,
        42,
        144,
        136,
        70,
        238,
        184,
        20,
        222,
        94,
        11,
        219,
        224,
        50,
        58,
        10,
        73,
        6,
        36,
        92,
        194,
        211,
        172,
        98,
        145,
        149,
        228,
        121,
        231,
        200,
        55,
        109,
        141,
        213,
        78,
        169,
        108,
        86,
        244,
        234,
        101,
        122,
        174,
        8,
        186,
        120,
        37,
        46,
        28,
        166,
        180,
        198,
        232,
        221,
        116,
        31,
        75,
        189,
        139,
        138,
        112,
        62,
        181,
        102,
        72,
        3,
        246,
        14,
        97,
        53,
        87,
        185,
        134,
        193,
        29,
        158,
        225,
        248,
        152,
        17,
        105,
        217,
        142,
        148,
        155,
        30,
        135,
        233,
        206,
        85,
        40,
        223,
        140,
        161,
        137,
        13,
        191,
        230,
        66,
        104,
        65,
        153,
        45,
        15,
        176,
        84,
        187,
        22,
    ],
    SBI = [
        82,
        9,
        106,
        213,
        48,
        54,
        165,
        56,
        191,
        64,
        163,
        158,
        129,
        243,
        215,
        251,
        124,
        227,
        57,
        130,
        155,
        47,
        255,
        135,
        52,
        142,
        67,
        68,
        196,
        222,
        233,
        203,
        84,
        123,
        148,
        50,
        166,
        194,
        35,
        61,
        238,
        76,
        149,
        11,
        66,
        250,
        195,
        78,
        8,
        46,
        161,
        102,
        40,
        217,
        36,
        178,
        118,
        91,
        162,
        73,
        109,
        139,
        209,
        37,
        114,
        248,
        246,
        100,
        134,
        104,
        152,
        22,
        212,
        164,
        92,
        204,
        93,
        101,
        182,
        146,
        108,
        112,
        72,
        80,
        253,
        237,
        185,
        218,
        94,
        21,
        70,
        87,
        167,
        141,
        157,
        132,
        144,
        216,
        171,
        0,
        140,
        188,
        211,
        10,
        247,
        228,
        88,
        5,
        184,
        179,
        69,
        6,
        208,
        44,
        30,
        143,
        202,
        63,
        15,
        2,
        193,
        175,
        189,
        3,
        1,
        19,
        138,
        107,
        58,
        145,
        17,
        65,
        79,
        103,
        220,
        234,
        151,
        242,
        207,
        206,
        240,
        180,
        230,
        115,
        150,
        172,
        116,
        34,
        231,
        173,
        53,
        133,
        226,
        249,
        55,
        232,
        28,
        117,
        223,
        110,
        71,
        241,
        26,
        113,
        29,
        41,
        197,
        137,
        111,
        183,
        98,
        14,
        170,
        24,
        190,
        27,
        252,
        86,
        62,
        75,
        198,
        210,
        121,
        32,
        154,
        219,
        192,
        254,
        120,
        205,
        90,
        244,
        31,
        221,
        168,
        51,
        136,
        7,
        199,
        49,
        177,
        18,
        16,
        89,
        39,
        128,
        236,
        95,
        96,
        81,
        127,
        169,
        25,
        181,
        74,
        13,
        45,
        229,
        122,
        159,
        147,
        201,
        156,
        239,
        160,
        224,
        59,
        77,
        174,
        42,
        245,
        176,
        200,
        235,
        187,
        60,
        131,
        83,
        153,
        97,
        23,
        43,
        4,
        126,
        186,
        119,
        214,
        38,
        225,
        105,
        20,
        99,
        85,
        33,
        12,
        125,
    ],
    PsiKey = [36, 39, 116, 98, 20, 148, 132, 84, 113, 19, 17, 40, 48, 147, 71, 22];
function cSL(a, c) {
    var b = a.slice(0, c);
    return (a = a.slice(c).concat(b));
}
var Nk = BS / 32,
    Nb = BB / 32,
    Nr = RA[Nk][Nb];
function XT(a) {
    a <<= 1;
    return a & 256 ? a ^ 283 : a;
}
function GF(a, c) {
    var b,
        d = 0;
    for (b = 1; 256 > b; b *= 2, c = XT(c)) a & b && (d ^= c);
    return d;
}
function bS(a, c) {
    var b;
    b = "e" == c ? SB : SBI;
    for (var d = 0; 4 > d; d++) for (var e = 0; e < Nb; e++) a[d][e] = b[a[d][e]];
}
function sR(a, c) {
    for (var b = 1; 4 > b; b++) a[b] = "e" == c ? cSL(a[b], SO[Nb][b]) : cSL(a[b], Nb - SO[Nb][b]);
}
function mC(a, c) {
    for (var b = [], d = 0; d < Nb; d++) {
        for (var e = 0; 4 > e; e++) b[e] = "e" == c ? GF(a[e][d], 2) ^ GF(a[(e + 1) % 4][d], 3) ^ a[(e + 2) % 4][d] ^ a[(e + 3) % 4][d] : GF(a[e][d], 14) ^ GF(a[(e + 1) % 4][d], 11) ^ GF(a[(e + 2) % 4][d], 13) ^ GF(a[(e + 3) % 4][d], 9);
        for (e = 0; 4 > e; e++) a[e][d] = b[e];
    }
}
function aRK(a, c) {
    for (var b = 0; b < Nb; b++) (a[0][b] ^= c[b] & 255), (a[1][b] ^= (c[b] >> 8) & 255), (a[2][b] ^= (c[b] >> 16) & 255), (a[3][b] ^= (c[b] >> 24) & 255);
}
function YE(a) {
    var c = [];
    Nk = BS / 32;
    Nb = BB / 32;
    Nr = RA[Nk][Nb];
    for (var b = 0; b < Nk; b++) c[b] = a[4 * b] | (a[4 * b + 1] << 8) | (a[4 * b + 2] << 16) | (a[4 * b + 3] << 24);
    for (b = Nk; b < Nb * (Nr + 1); b++)
        (a = c[b - 1]),
            0 == b % Nk
                ? (a = (SB[(a >> 8) & 255] | (SB[(a >> 16) & 255] << 8) | (SB[(a >> 24) & 255] << 16) | (SB[a & 255] << 24)) ^ RC[Math.floor(b / Nk) - 1])
                : 6 < Nk && 4 == b % Nk && (a = (SB[(a >> 24) & 255] << 24) | (SB[(a >> 16) & 255] << 16) | (SB[(a >> 8) & 255] << 8) | SB[a & 255]),
            (c[b] = c[b - Nk] ^ a);
    return c;
}
function Rd(a, c) {
    bS(a, "e");
    sR(a, "e");
    mC(a, "e");
    aRK(a, c);
}
function iRd(a, c) {
    aRK(a, c);
    mC(a, "d");
    sR(a, "d");
    bS(a, "d");
}
function FRd(a, c) {
    bS(a, "e");
    sR(a, "e");
    aRK(a, c);
}
function iFRd(a, c) {
    aRK(a, c);
    sR(a, "d");
    bS(a, "d");
}
function encrypt(a, c) {
    var b;
    if (a && 8 * a.length == BB && c) {
        a = pB(a);
        aRK(a, c);
        for (b = 1; b < Nr; b++) Rd(a, c.slice(Nb * b, Nb * (b + 1)));
        FRd(a, c.slice(Nb * Nr));
        return uPB(a);
    }
}
function decrypt(a, c) {
    var b;
    if (a && 8 * a.length == BB && c) {
        a = pB(a);
        iFRd(a, c.slice(Nb * Nr));
        for (b = Nr - 1; 0 < b; b--) iRd(a, c.slice(Nb * b, Nb * (b + 1)));
        aRK(a, c);
        return uPB(a);
    }
}
function byteArrayToString(a) {
    for (var c = "", b = 0; b < a.length; b++) 0 != a[b] && (c += String.fromCharCode(a[b]));
    return c;
}
function byteArrayToHex(a) {
    var c = "";
    if (a) {
        for (var b = 0; b < a.length; b++) c += (16 > a[b] ? "0" : "") + a[b].toString(16);
        return c;
    }
}
function hexToByteArray(a) {
    var c = [];
    if (!(a.length % 2)) {
        if (0 == a.indexOf("0x") || 0 == a.indexOf("0X")) a = a.substring(2);
        for (var b = 0; b < a.length; b += 2) c[Math.floor(b / 2)] = parseInt(a.slice(b, b + 2), 16);
        return c;
    }
}
function pB(a) {
    var c = [];
    if (a && !(a.length % 4)) {
        c[0] = [];
        c[1] = [];
        c[2] = [];
        c[3] = [];
        for (var b = 0; b < a.length; b += 4) (c[0][b / 4] = a[b]), (c[1][b / 4] = a[b + 1]), (c[2][b / 4] = a[b + 2]), (c[3][b / 4] = a[b + 3]);
        return c;
    }
}
function uPB(a) {
    for (var c = [], b = 0; b < a[0].length; b++) (c[c.length] = a[0][b]), (c[c.length] = a[1][b]), (c[c.length] = a[2][b]), (c[c.length] = a[3][b]);
    return c;
}
function fPT(a) {
    var c = BB / 8,
        b;
    if ("string" == typeof a || a.indexOf) for (a = a.split(""), b = 0; b < a.length; b++) a[b] = a[b].charCodeAt(0) & 255;
    for (b = c - (a.length % c); 0 < b && b < c; b--) a[a.length] = 0;
    return a;
}
function gRB(a) {
    var c,
        b = [];
    for (c = 0; c < a; c++) b[c] = Math.round(255 * Math.random());
    return b;
}
function rijndaelDecrypt(a, c, b) {
    var d = BB / 8,
        e = [],
        h,
        f;
    if (a && c && "string" != typeof a && 8 * c.length == BS) {
        b || (b = "ECB");
        c = YE(c);
        for (f = a.length / d - 1; 0 < f; f--)
            if (((h = decrypt(a.slice(f * d, (f + 1) * d), c)), "CBC" == b)) for (var g = 0; g < d; g++) e[(f - 1) * d + g] = h[g] ^ a[(f - 1) * d + g];
            else e = h.concat(e);
        "ECB" == b && (e = decrypt(a.slice(0, d), c).concat(e));
        return e;
    }
}
function stringToByteArray(a) {
    for (var c = [], b = 0; b < a.length; b++) c[b] = a.charCodeAt(b);
    return c;
}
function genkey() {
    for (var a = ""; ; ) {
        var c = Math.random().toString(),
            a = a + c.substring(c.lastIndexOf(".") + 1);
        if (31 < a.length) return a.substring(0, 32);
    }
}
function decodeText(text) {
    return decodeURIComponent(byteArrayToString(rijndaelDecrypt(hexToByteArray(text), PsiKey, "ECB")));
}
eval(
    decodeText(
        "2b97a903e8356abb99d13d804463349883188fbdef8122e217c377fe3d096f8b970995696c4948f9268f24a0c632a6d6c220da63457f30d488b08364bca3c991f874ada6202a7096e932c401eee6befa5a086b934989680df2c56fa5d00e383d65f44fcf33fbacc2cd7ea9b0dd369aaf491d80ca82a9cc454ef1bb448895428f9d477c17c521fc0a6462ab97aa05e4c17af793d979955879cffcd21e239cf7fdfb63c3409252a9e411c16febd23a3c9fb3016b499f5c6cf331079449ae992a098ef9b6e16fda5ec170dc22e35389f3cadc7199c9e50701314da1d805966936e230b1dfc1343065bb3a36bdda88c7eb5067cd2965364b336a12cb249d547e265bb39c10c40b06dc2fe513131399a19c21fb5eb71368229063f380029b8f6449c7dd5c2e824f8119a120d728348193827bd1d23a0c7cd9ebd1977346ff78eedf1269d746d59cd2660e3e5a81633b0d91565b7fceb188ea33e1c0a0fb3decb9b7405a62c5b11f4b8f24685103cb144f9d2926520df688df7ce5f5a020103706cfbe7b58c6998de9a7646d0f660542ddebba019bc07bec8b2db1a563af5aef18b667eaf9b1c1d03410380c3dd6469cbaacccc491d4a5763378a403d42a27dd08b23be0aa04efbb989d5d6fe4daceab6bd6fd9fb7c180e6a8615ea21e791822f727d4c250529a326d4a0f18d0b9e7f5d70b73495bc863c34c483e1f9caa6f23b4c31ce8e20266a03935ea2e6d3bfc14134a5935f9e8e32ec375c4a25df8b1b84de655b93648d1a799a733f0aeee9e56c39144805c17c5f56bfb03e8d69de55c4508abe3e9e1b2cae8a748cba858b640cdbeec50a6fd59dc83bc6a44c4a2e48b851184ed401023ea6cef49493c998e7d8bafdb3351dd46a31209b143fc22c1b284ac33f87e285f784baff3b21a81112ded8ce944c41da70f06ae86a4b7e5b2cc5503f854bedefa27363a07ed69047e5767ada24ad236b1df6bf0b8a9787d53bb781202b767703586a89ee3df3bde5ee6e95e01b923d9b08cde748cd432deaaed974311375f6e425190fcf8b795b3d3808c0edb94a53dd64936bde96ddf11519b6bb8e85620a4499e2ec10e75918e890a17a29b09e0dcd2592d31a10c1680124612a267ecd945826a7ea3211165a0c69820dd5a88ef19c3ae9436e0a8eea274b108dc77e0c4bc34c59f7743c5ae41ae71e567906c60ca8cf970f33f8d6cf86b87da60275b23c7821bf94419e15070686121735f5c149a1948963c4ee4efe29f3e424f978e165adee93dc31955acec817dab89fda0a2b0f2fd7583af91930dc7c92efa7171d3abc066b15db6ae365430e9f24ec89ffa4bc20c89f1521094d1b2a407e6c06f3700365500eff3e4b5ecdbdde0adc6cd815d67b9e38bd74f25575be66cec4046039b2d6e58d6db6e52608b674dda5c6a1f5c7a736bb6eebab545793155670144680f3dbc2ca3951ffcfc17b683a7474dca312c34a995fcf5a7c6c77bde2795"
    )
);
// Переопределяем функцию addFunction
addFunction = function() {
    // Мы просто делаем то, что делали в измененном коде:
    // Устанавливаем пустой текст для текстового объекта и добавляем его на сцену
    // (с проверками на существование stage)
    isOk = true;
    \u03a8.text = "";
    if (null == stage.getChildByName("\u03a8") && typeof stage !== 'undefined' && stage !== null && typeof stage.addChild === 'function') {
        stage.addChild(\u03a8);
    }
};

// Переопределяем функцию myCopyRighText, чтобы она ничего не делала
myCopyRighText = function() {
    // Просто пустая функция
};
